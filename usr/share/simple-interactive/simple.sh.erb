#!/bin/bash -l
#==============================================================================
# Copyright (C) 2020 Alces Flight Ltd.
#
# This work is licensed under a Creative Commons Attribution-ShareAlike
# 4.0 International License.
#
# See http://creativecommons.org/licenses/by-sa/4.0/ for details.
#==============================================================================
# ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
#                        SLURM SUBMISSION SCRIPT
#                       AVERAGE QUEUE TIME: Short
# ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

# ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
#  >>>> OPERATIONAL DIRECTIVES - change these as required
# ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

#=====================
#  Working directory
#---------------------
# The following directive overrides the jobs working directory to the
# specified location.
#
# Alternatively, adding an additional comment marker will disable the
# override. Your job will then be executed in the directory from which
# it was submitted.
#
#SBATCH -D <%= File.expand_path questions.working_dir.answer %>

#=========================
#  Environment variables
#-------------------------
# When set to "ALL", this setting exports all variables present when
# the job is submitted.  Set to "NONE" to disable environment variable
# propagation, or a comma-separated list to be more selective.
#
#SBATCH --export=ALL

#================
#  Output files
#----------------
# Set an output file for messages generated by your job script
#
# Specify a path to a file to contain the output from the standard
# output stream of your job script. If you omit `-e` below,
# standard error will also be written to this file.
#
#SBATCH -o <%= questions.stdout_file.answer %>

# Set an output file for STDERR
#
# Specify a path to a file to contain the output from the standard
# error stream of your job script.
#
# This is not required if you want to merge both output streams into
# the file specified above.
#
<% if questions.merge_stderr_with_stdout.answer.to_s == 'yes' -%>
##SBATCH -e <%= questions.stderr_file.default %>
<% else -%>
#SBATCH -e <%= questions.stderr_file.answer %>
<% end -%>

#============
#  Job name
#------------
# Set the name of your job - this will be shown in the process
# queue.
#
#SBATCH -J <%= questions.job_name.answer %>

#=======================
#  Email notifications
#-----------------------
# Set the destination email address for notifications.  If not set,
# will send mail to the submitting user on the submission host.
#
<% if questions.notification_wanted.answer == 'yes' -%>
#SBATCH --mail-user=<%= questions.notification_address.answer %>
<% else -%>
##SBATCH --mail-user=<%= questions.notification_address.default %>
<% end -%>

# Set the conditions under which you wish to be notified.
# Valid options are: NONE, BEGIN, END, FAIL, REQUEUE, ALL (equivalent
# to BEGIN, END, FAIL, REQUEUE, and STAGE_OUT), STAGE_OUT (burst
# buffer stage out and teardown completed), TIME_LIMIT, TIME_LIMIT_90
# (reached 90 percent of time limit), TIME_LIMIT_80 (reached 80
# percent of time limit), TIME_LIMIT_50 (reached 50 percent of time
# limit) and ARRAY_TASKS (send emails for each array task). Multiple
# type values may be specified in a comma separated list.
# If not specified, will send mail if the job is aborted.
#
<% if questions.notification_wanted.answer == 'yes' -%>
#SBATCH --mail-type <%= questions.notification_events.answer.join(',') %>
<% else -%>
##SBATCH --mail-type <%= questions.notification_events.default.join(',') %>
<% end -%>

#============
#  Deadline
#------------
# Set how long the job can remain in the queue before terminated. Slurm
# uses the "predicted end time" for this calculation. The deadline will
# need to compensate for the maximum runtime
<%
  start = questions.max_runtime.answer_in_seconds
  case questions.start_deadline_type.answer
  when 'offset'
    offset = questions.start_deadline_offset.answer_in_seconds
-%>
#
#SBATCH --deadline=now+<%= offset + start %>
<%
  when 'today'
    # NOTE: Due to how slurm handles deadlines, the --deadline=HH:MM
    # can lead to unexpected results. If it is *before* the current day
    # it will wrap to the next day.
    #
    # However this also needs to apply an offset for the "max runtime".
    # This offset can push times before *now* into the future. These
    # future times will not have sufficient deadline to run the job and
    # slurm will cancel it.
    #
    # As the --deadline behaviour is dependent on the "render" time, it
    # is better to use --deadline=now+<time>. It will be correct if
    # submit immediately after re-rendering, but it will also *kinda*
    # work if the submission is delayed.
    time = questions.start_deadline_today.answer
    now = Time.now
    offset = Time.parse(time).to_i - now.to_i
    deadline = offset + start
    deadline = 0 if deadline < 0
-%>
#
# NOTE: The following line was rendered at <%= now.hour -%>:<%= now.min %>
# This corresponds to a deadline of <%= time -%> if ran immediately
#SBATCH --deadline=now+<%= deadline %>
<% else -%>
#
# This job is due start immediately (within 5 seconds of submission)
#SBATCH --deadline=now+<%= 5 + start %>
<% end -%>

# ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
#  >>>> RESOURCE REQUEST DIRECTIVES - always set these
# ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

#===================
#  Maximum runtime
#-------------------
# Expected RUNTIME
#
# Enter the expected runtime for your job.  Specification of a
# shorter runtime will cause the scheduler to be more likely to
# schedule your job sooner, but note that your job **will be
# terminated if it is still executing after the time specified**.
#
# A time limit of zero requests that no time limit be imposed.
# Format: one of "minutes", "minutes:seconds",
# "hours:minutes:seconds", "days-hours", "days-hours:minutes" and
# "days-hours:minutes:seconds". e.g. `3-0` for 3 days.
#SBATCH --time=<%= questions.max_runtime.answer %>

#================
#  Memory limit
#----------------
# Expected HARD MEMORY LIMIT
#
# Enter the expected memory usage of your job.  Specification of a
# smaller memory requirement will cause the scheduler to be more
# likely to schedule your job sooner, but note that your job **may
# be terminated if it exceeds the specified allocation**.
#
# Note that this setting is specified in megabytes.
# e.g. specify `1024` for 1 gigabyte.
#
#SBATCH --mem=<%= questions.memory_limit.answer %>

# ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
#  >>>> SET TASK ENVIRONMENT VARIABLES
# ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
# If necessary, set up further environment variables that are not
# specific to your workload here.
#
# Several standard variables, such as SLURM_JOB_ID, SLURM_JOB_NAME and
# SLURM_NTASKS, are made available by the scheduler.

#============================
#  Results/Metadata directory
#----------------------------
# By convention, job's submitted with `flight-job` are expected to save their
# results to RESULTS_DIR.  `flight-job` provides easy access to any files
# saved there.
#
# If RESULTS_DIR is modified, `flight-job` will be unable to track the job's
# results.
#
# The CONTROLS_DIR is used internally to track various flight-job data files.
# This is primarily used to store the VNC settings for the interactive
# sesison.
#
# WARNING: The script must not change directory prior to this line.
RESULTS_DIR="$(pwd)/${SLURM_JOB_NAME}-outputs/$SLURM_JOB_ID"
CONTROLS_DIR="$(pwd)/${SLURM_JOB_NAME}-controls/$SLURM_JOB_ID"
mkdir -p "$CONTROLS_DIR"
mkdir -p "$RESULTS_DIR"
FLIGHT_DESKTOP_STDOUT="$CONTROLS_DIR"/flight-desktop-stdout
FLIGHT_DESKTOP_STDERR="$CONTROLS_DIR"/flight-desktop-stderr
FLIGHT_DESKTOP_STATUS="$CONTROLS_DIR"/flight-desktop-status

# ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
#  >>>> YOUR WORKLOAD
# ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

#=======================
#  Environment modules
#-----------------------
# e.g.:
# module load apps/imb

#===========================
#  Results directory
#---------------------------
# By convention, job's submitted with `flight-job` are expected to save their
# results to RESULTS_DIR.  `flight-job` provides easy access to any files
# saved there.
#
# Your job can save its results anywhere you want, but if the results are
# saved outside of RESULTS_DIR (or if RESULTS_DIR is modified), 'flight-job'
# will be unable to help you access your results.
#
# RESULTS_DIR has already been set to "${WORKING_DIR}/${SLURM_JOB_NAME}-outputs/$SLURM_JOB_ID".
echo "Your results will be stored in: $RESULTS_DIR"

#===============================
#  Application launch commands
#-------------------------------
# Customize this section to suit your needs.

echo "Executing job commands, current working directory is $(pwd)"

# REPLACE THE FOLLOWING WITH YOUR APPLICATION COMMANDS

# Install the application - Demo R
flight start
flight env create gridware
flight env activate gridware
module load apps/R

# Additional command-line options (R -h for a list).
R_OPTIONS=""

# Start R and an empty terminal with flight-desktop
# NOTE: Standard output must be reported to the FLIGHT_DESKTOP_SESSION
#       file. Failure to do so will prevent flight-job from tracking
#       the session.
flight desktop start \
  --app "R $R_OPTIONS" \
  --script bash \
  >"$FLIGHT_DESKTOP_STDOUT" \
  2>"$FLIGHT_DESKTOP_STDERR"
echo $? >"$FLIGHT_DESKTOP_STATUS"
sleep infinity
