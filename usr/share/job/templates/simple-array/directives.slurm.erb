#!/bin/bash -l
#==============================================================================
# Copyright (C) 2020 Alces Flight Ltd.
#
# This work is licensed under a Creative Commons Attribution-ShareAlike
# 4.0 International License.
#
# See http://creativecommons.org/licenses/by-sa/4.0/ for details.
#==============================================================================
# ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
#                        SLURM SUBMISSION SCRIPT
#                       AVERAGE QUEUE TIME: Short
# ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

# ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
#  >>>> OPERATIONAL DIRECTIVES - change these as required
# ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

#=====================
#  Working directory
#---------------------
# The following directive overrides the jobs working directory to the
# specified location.
#
# Alternatively, adding an additional comment marker will disable the
# override. Your job will then be executed in the directory from which
# it was submitted.
#
#SBATCH -D <%= File.expand_path questions.working_dir.answer %>

#=========================
#  Environment variables
#-------------------------
# When set to "ALL", this setting exports all variables present when
# the job is submitted.  Set to "NONE" to disable environment variable
# propagation, or a comma-separated list to be more selective.
#
#SBATCH --export=ALL

#================
#  Output files
#----------------
# Set an output file for messages generated by your job script
#
# Specify a path to a file to contain the output from the standard
# output stream of your job script. If you omit `-e` below,
# standard error will also be written to this file.
#
#SBATCH -o <%= questions.stdout_file.answer %>

# Set an output file for STDERR
#
# Specify a path to a file to contain the output from the standard
# error stream of your job script.
#
# This is not required if you want to merge both output streams into
# the file specified above.
#
<% if questions.merge_stderr_with_stdout.answer.to_s == 'yes' -%>
##SBATCH -e <%= questions.stderr_file.default %>
<% else -%>
#SBATCH -e <%= questions.stderr_file.answer %>
<% end -%>

#============
#  Job name
#------------
# Set the name of your job - this will be shown in the process
# queue.
#
#SBATCH -J <%= questions.job_name.answer %>

#=======================
#  Email notifications
#-----------------------
# Set the destination email address for notifications.  If not set,
# will send mail to the submitting user on the submission host.
#
<% if questions.notification_wanted.answer == 'yes' -%>
#SBATCH --mail-user=<%= questions.notification_address.answer %>
<% else -%>
##SBATCH --mail-user=<%= questions.notification_address.default %>
<% end -%>

# Set the conditions under which you wish to be notified.
# Valid options are: NONE, BEGIN, END, FAIL, REQUEUE, ALL (equivalent
# to BEGIN, END, FAIL, REQUEUE, and STAGE_OUT), STAGE_OUT (burst
# buffer stage out and teardown completed), TIME_LIMIT, TIME_LIMIT_90
# (reached 90 percent of time limit), TIME_LIMIT_80 (reached 80
# percent of time limit), TIME_LIMIT_50 (reached 50 percent of time
# limit) and ARRAY_TASKS (send emails for each array task). Multiple
# type values may be specified in a comma separated list.
# If not specified, will send mail if the job is aborted.
#
<% if questions.notification_wanted.answer == 'yes' -%>
#SBATCH --mail-type <%= questions.notification_events.answer.join(',') %>
<% else -%>
##SBATCH --mail-type <%= questions.notification_events.default.join(',') %>
<% end -%>

# ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
#  >>>> RESOURCE REQUEST DIRECTIVES - always set these
# ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

#===================
#  Maximum runtime
#-------------------
# Expected RUNTIME
#
# Enter the expected runtime for your job.  Specification of a
# shorter runtime will cause the scheduler to be more likely to
# schedule your job sooner, but note that your job **will be
# terminated if it is still executing after the time specified**.
#
# A time limit of zero requests that no time limit be imposed.
# Format: one of "minutes", "minutes:seconds",
# "hours:minutes:seconds", "days-hours", "days-hours:minutes" and
# "days-hours:minutes:seconds". e.g. `3-0` for 3 days.
#SBATCH --time=<%= questions.max_runtime.answer %>

#================
#  Memory limit
#----------------
# Expected HARD MEMORY LIMIT
#
# Enter the expected memory usage of your job.  Specification of a
# smaller memory requirement will cause the scheduler to be more
# likely to schedule your job sooner, but note that your job **may
# be terminated if it exceeds the specified allocation**.
#
# Note that this setting is specified in megabytes.
# e.g. specify `1024` for 1 gigabyte.
#
#SBATCH --mem=<%= questions.memory_limit.answer %>

#=========================
#  Resource requirements
#-------------------------
# Resources required for your job
#
# If your job has specific resource requirements specify them below.
# Specification of fewer resources will cause the scheduler to be more likely
# to scheduler your job sooner.
#
# e.g. GPUs, MICs, etc.
##SBATCH --gres gpu:1

#=====================
#  Specify partition
#---------------------
# The partition on which your job is to run
#
# Enter the partition that your job is to be submitted to.  You can find the
# list of available partitions by running the `sinfo` command from your
# cluster login.
##SBATCH -p nodes

#=======================
#  Array configuration
#-----------------------
# Enter the number of tasks and how many to schedule at once.
#
# For example 1-10%4 will run 10 jobs, numbered from 1 to 10 and limit
# the number of simultaneous jobs to 4.
#
#SBATCH --array=<%= questions.array_configuration.answer %>
