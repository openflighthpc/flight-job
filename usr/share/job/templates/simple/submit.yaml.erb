<%
  # There are a couple of ways in which arguments to the scheduler and job
  # script can be specified.
  #
  # For simple arguments which are always going to be given it is perhaps
  # easiest to include them directly in the list below (see `--time` and
  # `--mem` as examples).
  #
  # If the argument is not always going to given, or there is some complexity
  # in generating its value, it is perhaps best to generate and collect the
  # args here and then process the collection below (see `--job-name` as
  # an example).
  #
  scheduler_args = []
  job_script_args = []

  if !questions.job_name.answer.blank?
    scheduler_args << "--job-name"
    scheduler_args << questions.job_name.answer
  end
-%>
---
scheduler:
  # An array of command line arguments that will be given to the scheduler
  # submission tool, e.g., `sbatch`.
  args:
<%#
      The `--time` flag is always given. Its value will be the value
      provided by the user, or the default set for that question.  If neither
      of those exist, the `--time` flag will not have a value given and the
      submission will likely fail.

      In short, specifying a flag without making sure it has a value, is
      probably not a good idea.
    -%>
    - "--time"
    - "<%= questions.max_runtime.answer %>"

<%#
      The `--mem` flag is always given. Its value will be the value provided
      by the user, the default set for that question, or the value hardcoded
      here as `2048`.
    -%>
    - "--mem"
    - "<%= questions.memory_limit.answer(when_blank: '2048') %>"

<% scheduler_args.each do |arg| -%>
    - "<%= arg %>"
<% end -%>

job_script:
  # An array of command line arguments that will be given to the job script,
  # (assuming that the scheduler supports this functionality).
  args:
    - "<%= questions.workload.answer %>"
<% job_script_args.each do |arg| -%>
    - "<%= arg %>"
<% end -%>
